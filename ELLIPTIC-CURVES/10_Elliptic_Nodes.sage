from Crypto.Util.number import long_to_bytes

p = 4368590184733545720227961182704359358435747188309319510520316493183539079703
F = GF(p)
gx = 8742397231329873984594235438374590234800923467289367269837473862487362482
gy = 225987949353410341392975247044711665782695329311463646299187580326445253608
px = 2582928974243465355371953056699793745022552378548418288211138499777818633265
py = 2421683573446497972507172385881793260176370025964652384676141384239699096612
M = Matrix(F, [[gx,1],[px,1]])
a,b = M.solve_right(vector([gy^2-gx^3,py^2-px^3]))
K.<x> = F[]
f = x^3 + a*x + b
roots = f.roots()
beta, alpha = roots[0][0], roots[1][0]
slope = (alpha - beta).sqrt()
u = (gy + slope*(gx-alpha))/(gy - slope*(gx-alpha))
v = (py + slope*(px-alpha))/(py - slope*(px-alpha))
flag = long_to_bytes(discrete_log(v, u))
print(flag)
